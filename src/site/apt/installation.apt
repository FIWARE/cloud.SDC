Installation guide

* Prerequisites

  As SDC server is a web application, we need to install a J2EE container, and
  a database manager. In development we will use <<<Tomcat>>> as J2EE server and <<<Postgresql>>>
  as database management.

** Tomcat installation

  The chosen version during the development process will be 7.X.X
  {{{http://apache.rediris.es/tomcat/tomcat-7/v7.0.12/bin/apache-tomcat-7.0.12.zip}
  available on the website}}.
  You only need to extract the files and run the startup and shutdown scripts.

+-------
    $PROMT: $CATALINA_HOME/bin/catalina run (run tomcat)

    $PROMT: $CATALINA_HOME/bin/catalina stop (stop tomcat)

    $PROMT: $CATALINA_HOME/bin/catalina jpda run (run tomcat in debug mode)
+-------


** Postgresql Installation

  See {{{http://www.postgresql.org/}postgresql website}} to install it.

  We also shall create a new database to store the persistence data. The system
  is in charge to create the tables on first deploy so only is needed the empty
  database.

  Finally we need to add the jdbc connector in Tomcat library. To do that,
  {{{http://jdbc.postgresql.org/}download}} the connector from and store in
   <<$CATALINA_HOME/lib>>.


** WebDav installation
    
   These instructions are based on {{{http://www.debian-administration.org/articles/285}Web Dav how to install}}

   
   The webdav  is the component of the SDC-Server that stores the installables of
   the available software (products and applications) to be installed in the nodes.
   
   Make sure Apache2 is installed and the optional DAV modules are enabled

+-------
apt-get install apache2
a2enmod dav_fs
a2enmod dav
+----------   
   
   Create a Virtual host in /etc/apache2/sites-available/sdc.com

+-------
<VirtualHost *:80>
        ServerAdmin webmaster@example.com
        ServerName 109.231.82.11

        DocumentRoot /opt/sdc/webdav
        <Directory /opt/sdc/webdav>
                Options Indexes MultiViews
                AllowOverride None
                Order allow,deny
                allow from all
        </Directory>
</VirtualHost>
+----------  

   We need now to create the directory where all the files managed by our WebDav 
   are going to be:

+-------
mkdir /home/srw/example.com
chown www-data /home/srw/example.com
a2ensite sdc.com
apache2ctl configtest
/etc/init.d/apache2 reload
+-------
   
   Now we are interested in setup a Basic Authentication mechanism in our WebDav
   server. Enable the authentication module and create the password file

+-------
a2enmod auth_digest
htdigest -c /etc/apache2/passwd/passwords webdav-example root
+-------
   
   You will be prompted to introduce the password: <<temporal>>
   
   After, we introduce the WebDAV section into the Virtual host:
   
+-------
# Note Alias goes to our DocumentRoot.
Alias /webdav /opt/sdc/webdav

# But we apply different settings
<Location /webdav>
    Dav on
    #AuthType Digest
    #AuthName "webdav-example"
    #AuthUserFile  /opt/sdc/digest-password
    #Require valid-user
    AuthType Basic
    AuthName "SDC Server Webdav"
    AuthUserFile /etc/apache2/passwd/passwords
    Require user root
 </Location>

+-------

   We reconfigure apache and reload it

+-------
apache2ctl configtest
/etc/init.d/apache2 reload
+-------

   In order to test if the webdav has been configured in a good way, we use
   the cadaver webdav client

+-------
apt-get install cadaver
cadaver http://109.231.82.11/webdav/
+-------
    
    Finally, create the directories <<product>> and <<application>> in the webdav.
    This directories will be visible trough the url:

+-------
http://109.231.82.11/webdav/product
http://109.231.82.11/webdav/application
+-------
   
   
   Useful References:
   
   {{{http://www.debian-administration.org/articles/285}Web Dav how to install}}
   
   {{{http://httpd.apache.org/docs/2.0/mod/mod_dav.html}mod_dav apache2 module}}
   
   {{{ http://www.webdav.org/cadaver/}Cadaver Website}}
  

** Chef installation
*** Using the script

  Simply {{{./install_chef_knife.sh}download}} the script and execute it .

*** Step by step installation (if the script does not works for you)

  [[1]] Ruby

  Install Ruby and development tools:

+-------
sudo apt-get install ruby ruby-dev libopenssl-ruby rdoc ri irb build-essential wget ssl-cert git-core
+-------

  [[2]] RubyGems 1.3.5+ installation

  Checking if it is already installed by typing   <<<gem -v>>>

  If you have an older version then type: <<<sudo gem update -system>>>

  If Rubygems is not installed or you are using Ubuntu, install it from source

+-------
cd /tmp
wget http://production.cf.rubygems.org/rubygems/rubygems-1.3.7.tgz
tar zxf rubygems-1.3.7.tgz
cd rubygems-1.3.7
sudo ruby setup.rb --no-format-executable
+----------

 [[3]] Install Chef

+----------
sudo gem install chef
+---------

  [[4]] Install Git on a local workstation

    Check if git is installed on your system: <<<git -version>>>

  [[5]] Create Chef repository

+---------
cd ~
git clone git://github.com/opscode/chef-repo.git
+-----------

  [[6]] Create .chef directory to store credentials and knife configuration file

+-------------
mkdir -p ~/chef-repo/.chef
+--------------

 [[7]]Copy the chef server credentials and knife configuration file

+----------
cp USERNAME.pem ~/chef-repo/.chef
cp ORGANIZATION-validator.pem ~/chef-repo/.chef
cp knife.rb ~/chef-repo/.chef
+----------

  [[8]]Testing the connection to the Chef server

+----------
cd ~/chef-repo
knife client list
[
    "ORGANIZATION-validator"
]
+----------

* SDC-Server installation

  Once the prerequisites are satisfied, you shall create the context file. To do
  that, change sdc.xml found in distribution file and store it in folder
  <<$CATALINA_HOME/conf/Catalina/localhost>>.

  See the snipet bellow to know how it works:

+----
<Context path="/sdc" docBase="path dond está el fichero war" reloadable="true" debug="5">
        <Resource name="jdbc/sdc" auth="Container"
        type="javax.sql.DataSource"
        driverClassName="org.postgresql.Driver"  <!-- select the driver-->
        url="jdbc:postgresql://localhost:5432/sdc" <!-- select the connection url-->
         username="postgres" password="postgres" <!-- select the user/password-->
         maxActive="20" maxIdle="10" maxWait="-1"/>
</Context>
+----

  You also have to add the provided scripts found in the
  {{{./downloads/sdc-server-dist-bin.zip} dist file}} (in folder /opt/sdc/scripts/)
  in the same folder (or everywhere you want if you prefer to change the default
  configuration).

  The last step is configure the system to log into Chef Server. To do that, the only
  thing shall do is specify where is located the pem file containig the Chef Server's
  private key (by default /opt/sdc/private.pem).

  It is also needed to provide the installables in the WebDav repository installed.
  So far, due to the fact that the recipes done are in a testing mode, the WebDav structure
  associated to each product/application should be done manually:
  
  Tomcat need the following structure 

+----
  product/tomcat/7/apache-tomcat-7.0.22.tar.gz
  product/tomcat/6/apache-tomcat-6.0.33.tar.gz
  product/tomcat/5.5/apache-tomcat-5.5.34.tar.gz
+----

  and this structure can be done leaving the installables in /tmp directory and using 
  the <<cadaver>> WebDav client ( <<cadaver http://109.231.82.11/webdav>> command
  <<root/temporal>> and with <<mkdir>> and <<put>> commands)
  
  Sdc need the following structure (proceed in a similar way as with tomcat)
  
+----
  application/sdc/1.0.0/install/postgresql-8.4-702.jdbc4.jar
  application/sdc/1.0.0/install/sdc-postgres.sh
  application/sdc/1.0.0/install/sdc-server-rest-api.war
  application/sdc/1.0.0/uninstall/uninstall-sdc-postgres.sh
+----

  Postgresql does not need any structure since the installatin/uninstallation
  is done via apt-get taking the packages directy form debian repo.
  


  Finally, run Tomcat and enjoy!!!

  <<Note:>> The distribution file also provides some recipes you can add to your
  chef server if needed.
