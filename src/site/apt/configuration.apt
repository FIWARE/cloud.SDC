System Configuration

  SDC Server is using <<commons-properties>> project it means, it provides persistent
  properties through data base. It also expose these properties through MBean.
  This feature give us the possibility to change the values in runtime instead of
  using java standard properties that only allow change its values offline.

* Properties

  The list bellow show the different properties the system is using and their meaning:

  *  <<assignRecipesScript>> = The script called to assign a recipe to a chef node.
  (the parameters are the hostname + domain and the recipe-template )
  (<<</root/chef-repo/scripts/assignRecipes.sh {0} {1}>>>).

  *  <<unassignRecipesScript>> = The script called to unassign a recipe to a chef node.
  (the parameters are the hostname + domain and the recipe-template )
  (<<</root/chef-repo/scripts/unassignRecipes.sh {0} {1}>>>).

  *  <<executeRecipesScript>> = The script to perfomr the installation usign chef.
  It will receive the conection params, (ip or hostname + domain) (<<</root/chef-repo/scripts/executeRecipes.sh root@{0}>>>).

  *  <<uninstallProductRecipeTemplate>> = The template name used in uninstall
  prouctsrecipes. It will receive the product name and version (<<<{0}::{1}_uninstall>>>).

  *  <<installProductRecipeTemplate>> = The template name used in install
  proucts recipes. It will receive the product name and version (<<<{0}::{1}_install>>>).

  *  <<backupProductRecipeTemplate>> = The template name used in backup
  proucts recipes. It will receive the product name and version (<<<{0}::{1}_backup>>>).

  *  <<restoreProductRecipeTemplate>> = The template name used in restore
  proucts recipes. It will receive the product name and version (<<<{0}::{1}_restore>>>).


  *  <<uninstallAppRecipeTemplate>> = The template name used in uninstall applications. It will
  receive the application type (war, etc.), application name, version, and the products
  name (orderded) separated by <<productListSeparator>>  (<<<{0}::{1}-{2}_uninstall_{3}>>>).

  *  <<installAppRecipeTemplate>> = The template name used in install applications. It will
  receive the application type (war, etc.), application name, version, and the products
  name (orderded) separated by <<productListSeparator>>  (<<<{0}::{1}-{2}_install_{3}>>>).

  *  <<backupAppRecipeTemplate>> = The template name used in backup applications. It will
  receive the application type (war, etc.), application name, version, and the products
  name (orderded) separated by <<productListSeparator>>  (<<<{0}::{1}-{2}_backup_{3}>>>).

  *  <<restoreAppRecipeTemplate>> = The template name used in restore applications. It will
  receive the application type (war, etc.), application name, version, and the products
  name (orderded) separated by <<productListSeparator>>  (<<<{0}::{1}-{2}_restore_{3}>>>).

  *  <<productListTemplate>> = The product list item, parametrized by product name and version (<<<{0}-{1}>>>).

  *  <<productListSeparator>> = The product list separator (<<<->>>).

  *  <<copyAppFilesFromServerToNode>> = The script used to copy the application files from server to node.
  It will receive the node connection url, the destination folder and the source folder
  (<<</opt/sdc/scripts/copyAppFilesFromServerToNode.sh {0} {1} {2}>>>).

  *  <<defaultAppFilesSourceFolder>> = The folder where the files for an application are in the server.
  It will receive the application type and the application name (<<</opt/sdc/app/{0}/{1}/>>>).

  *  <<defaultAppFilesDestinationFolder>> = The folder where the files for an application
   will be in the node.
  It will receive the application type and the application name (<<</opt/sdc/app/{0}/>>>).

  defaultAppFilesDestinationFolder = /opt/sdc/app/{0}/

  *  <<defaultHostDomain>> = The default domain, used when no host is passed in OS installation
   (<<<.hi.inet>>>).

  * <<chefRoleTemplate>> = The default Role template (to configure an application or product)
  Is parametrized by node name, install recipe, attribute list (see the properties bellow),
  role name, and proccess name (the application or product name with no version)
  (<<<name "{3}" \n description " This role aims to overwrite cookbook  attributes
   of {1} cookbook associated to the node {0} by defining override attributes
    " \n run_list "recipe[{1}]" \n override_attributes "{4}" =\> {2}>>>)

  * <<chefAttributesTemplate>> =  The attributes list item parametrized by attribute key and value (<<<"{0}" =\> {1}>>>)

  * <<chefAttributesSeparator>> = The attribute list separator (<<<,>>>)

  * <<chefAttributesLeftLimiter>> the attribute list left limiter (<<<{>>>)

  * <<chefAttributesRightLimiter>> the attribute list right limiter (<<<}>>>)
