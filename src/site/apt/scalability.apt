Scalability

  The system shall be able to grow up or down according the client's demand, this
  way SDC shall provides some mechanism to get this goal.

  As SDC is composed for 3 main components is necessary to find a mechanism to
  solve the problem in the three components.

  See the diagram bellow to know the responsibility of those three components:

[img/DeploymentDiagram.png] Deployment diagram

  Those components are:

  * <<J2EE system:>> a lot of solutions for this kind of systems are available.
  Also the exposed Rest-API only give us primitive functions so there is no reason
  to limit the request's sequence to a single machine. As the state is stored out
  of the container, we can have a lot of SDC servers pointing to a single machine.

  * <<DB system:>> a lot of DBM systems provides scaling solutions so the design
  can be done with no special attention with this component.


  * <<Chef server system:>> this system is not so well known as DB or J2EE systems,
  but Opscode tell in its web Chef server is scalable. As implementation reference,
  Opscode cite
  {{{http://blog.cyclecomputing.com/2011/05/why-baking-your-cluster-ami-limits-the-menu-devops-for-large-hpc-clusters.html}this article}}
  where a cloud group tell us how the scale Chef server. Seeing the architecture
  diagram we found the Chef Server Infrastructure is formed by many components
  that could be scaled according our needs.

[http://wiki.opscode.com/download/attachments/7274878/chef-server-arch.png?version=1&modificationDate=1281654652000] Chef Infrastructure


